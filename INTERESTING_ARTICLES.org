* General

- [[https://lukeplant.me.uk/blog/posts/no-one-actually-wants-simplicity/][No one actually wants simplicity]] Simplicity is sacrifice. See also [[https://www.youtube.com/watch?v=SxdOUGdseq4][simple made easy (video)]], [[https://www.seangoedecke.com/wicked-features/][wicked features]].
- [[https://www.geoffreylitt.com/2025/03/03/the-nightmare-bicycle.html][Avoid the nightmare bicycle]] Good designs expose systematic structure; they lean on their users’ ability to understand this structure and apply it to new situations.

* Programming

- [[https://mikehadlow.blogspot.com/2012/05/configuration-complexity-clock.html][The Configuration Complexity Clock]] Programming languages, configuration files, DSLs for configuration
- [[https://olano.dev/2023-11-30-code-is-run-more-than-read/][Code is run more than read]] A unified theory of broken software
- [[https://www.teamten.com/lawrence/writings/java-for-everything.html][Java for Everything]] The advantages of focusing on a single language and how performance and static typing are helpful.
- [[https://en.wikipedia.org/wiki/Ostrich_algorithm][Ostrich algorithm]]
- [[https://blog.brownplt.org/2024/04/12/behavior-misconceptions.html][Finding and Fixing Standard Misconceptions About Program Behavior]] About the Standard Model of Languages (SMoL)
- [[https://dannorth.net/best-simple-system-for-now/][Best Simple System for Now]] A view I disagree on about IAGNI and the opposite concepts, but interesting
- [[https://mmapped.blog/posts/38-static-types-perfectionism][Static types are for perfectionists]] Our programming style is influenced by our personality and life

** Testing

- [[https://testing.googleblog.com/2014/05/testing-on-toilet-risk-driven-testing.html][Testing on the Toilet: Risk-Driven Testing]] "Your tests are a means. The bang is what counts. It’s your job to maximize it."
- [[https://testing.googleblog.com/2024/10/smurf-beyond-test-pyramid.html][SMURF: Beyond the Test Pyramid]] Test categories and the pyramid are excessively limited models.
- [[https://softwareengineering.stackexchange.com/questions/123627/what-are-the-london-and-chicago-schools-of-tdd][What are the London and Chicago schools of TDD?]] (Just to remember these useful terms)

** Python

- [[https://lukeplant.me.uk/blog/posts/pythons-disappointing-superpowers/][Python’s "Disappointing" Superpowers]] A convincing defense of dynamic typing

** Rust

- [[https://www.hezmatt.org/~mpalmer/blog/2024/05/01/the-mediocre-programmers-guide-to-rust.html][The Mediocre Programmer's Guide to Rust]]

** Optimization

- [[https://docs.oracle.com/cd/E11882_01/server.112/e41573/technique.htm][The Oracle Performance Improvement Method]] My favorite text about performance tuning- the good advice is not Oracle-specific. Includes a bit more real-world advice than [[https://users.ece.utexas.edu/~adnan/pike.html][Rob Pike's 5 Rules of Programming]].
- [[https://infrequently.org/series/performance-inequality/][The Performance Inequality Gap, 2024]], [[https://danluu.com/slow-device/][How web bloat impacts users with slow devices]], about janky browser applications and websites.

** Git
- [[https://blog.gitbutler.com/git-tips-3-really-large-repositories/][Git Tips 3: Really Large Repositories]]

* Organizations

- [[https://charity.wtf/2024/07/24/pragmatism-neutrality-and-leadership/][Pragmatism, Neutrality and Leadership]]; the parts about "As a leader, your job is to succeed", "Companies with shitty cultures win all the time".
  This article connects with [[https://hbr.org/2007/03/why-i-wrote-the-no-asshole-rule][The no asshole rule]] book.
- [[https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/][The Engineer/Manager Pendulum]] Why people should multiclass engineering and management
- [[https://varoa.net/2024/01/09/how-organisations-cripple-engineering-teams-with-good-intentions.html][How organisations cripple engineering teams with good intentions]] Arguments for having coders code
- [[https://stackoverflow.blog/2024/06/10/generative-ai-is-not-going-to-build-your-engineering-team-for-you/][Generative AI Is Not Going To Build Your Engineering Team For You]] Bad title; it's about the need for junior coders
- [[https://luminousmen.com/post/senior-engineer-fatigue][Senior Engineer Fatigue]]
- [[https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/][Things You Should Never Do, Part I]] About rewriting software from scratch

** Project management

- [[https://apenwarr.ca/log/20171213][An epic treatise on scheduling, bug tracking, and triage]] - no non-sense opinions on project management I mostly agree with

* News

- [[https://www.currentaffairs.org/2020/08/the-truth-is-paywalled-but-the-lies-are-free/][The Truth Is Paywalled But The Lies Are Free]] - Excellent title, but the article is so-so

* Society

- [[https://locadeldesvan.com/2025/01/09/contra-la-tecnocratizacion-de-la-vida/][Contra la tecnocratización de la vida]] About the pressure of the modern age and the privilege of being mediocre

* Meta

- [[https://www.benkuhn.net/progessays/][Essays on programming I think about a lot]]
- [[https://www.piglei.com/articles/en-programmer-reading-list-part-one/][A Programmer's Reading List: 100 Articles I Enjoyed (1-50)]]
